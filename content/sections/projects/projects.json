{
  "projects": [
    {
      "visible": true,
      "category": "üïπÔ∏è Artificial Intelligence ",
      "title": "Multi Agent Path Finding",
      "description": "  Implemented Safe Interval Path Planning (SIPP), a faster algorithm than A* in dynamic path planning Studied multiple research papers and developed an algorithm byimplementing dynamic, safe intervals, which eliminated recalculatingpaths on every timestep, reducing the generated state spaceSuccessfully calculated optimal paths and the program ran 30%-40% faster than A* in general cases",
      "tags": ["", ""],
      "image": {
        "src": "../../images/sipp.jpeg",
        "alt": "Quick Setup",
        "linkTo": "https://github.com/ssawant0202/CMPT-417-Safe-Interval-Path-Planning"
      },
      "links": [
        {
          "type": "github",
          "url": "https://github.com/ssawant0202/CMPT-417-Safe-Interval-Path-Planning"
        },
        {
          "type": "",
          "url": ""
        }
      ]
    },
    {
      "visible": true,
      "category": "ü§ñ Artificial Intelligence",
      "title": "Affective Computing",
      "description": "Generated artificial facial expressions based on gender, race and environment. Led a group of 3 to train the AI model producing appropriate Action Units (AUs). Collected wild and premade datasets from the web and trained the AI using Gaussian Mixture Model to separate the AU clusters. Verified the accuracy using K fold cross-validation. Generated 100 sensible facial expressions and classified them based on Plutchik‚Äôs Wheel of Emotions",
      "tags": ["", ""],
      "image": {
        "src": "../../images/makehuman.jpg",
        "alt": "Extendable Layout"
      },
      "links": [
        {
          "type": "github",
          "url": "https://github.com/ssawant0202/CMPT-417-Safe-Interval-Path-Planning"
        }
      ]
    },
    {
      "visible": true,
      "category": "üîß Embedded Systems",
      "title": "FTP Y-Modem Protocol",
      "description": "Debugged and corrected the functionality of a multi-threaded socket-pair application.The thread had different real time priorities. Sender data was passed through a medium thread which corrupted, dropped and injected random characters upon receiving. Developed state chart and thread table to understand the program's flow. Implemented a CRC16 checker so receiver can request same block of 128 bytes if CRC's didn't match. Added dump glitches function to dump glitched characters(noise) stored in socket pair before the last byte was sent. Successfully verified the functionality of the terminal program by sending 100 files and received an A for the course",
      "tags": ["", ""],
      "image": {
        "src": "../../images/multithreaded.jpg",
        "alt": "Extendable Layout"
      },
      "links": [
        {
          "type": "github",
          "url": "https://github.com/ssawant0202/ENSC-351-Multi-Threaded-App-"
        }
      ]
    }
  ],
  "button": {
    "visible": false,
    "label": "Visit on Github",
    "url": "https://github.com/ssawant0202/"
  }
}
